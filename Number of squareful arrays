/*

Time Complexity: O(N^2 * 2^N)

Space Complexity: O(N * 2^N)

where 'N' is the size of the array.

*/

bool isSquare(int x) {

int t = sqrt(x);

return (t * t == x);

}

int fact(int x) {

// Calculating the factorial.

int t = 1;

for (int i = 2; i <= x; i++)

t *= i;

return t;

}

int numberOfSquarefulArrays(vector < int > & arr, int n) {

sort(arr.begin(), arr.end());

vector < int > s;

int cnt = 1;

for (int i = 1; i < n; i++) {

if (arr[i] != arr[i - 1]) {

s.push_back(cnt);

cnt = 0;

}

cnt++;

}

s.push_back(cnt);

vector < vector < int >> f(1 << n, vector < int > (n, 0));

for (int i = 0; i < n; i++) {

f[1 << i][i] = 1;

}

for (int k = 1; k < (1 << n); k++) {

for (int i = 0; i < n; i++) {

if ((k & (1 << i)) != 0) {

for (int j = 0; j < n; j++) {

if ((k & (1 << j)) == 0 && isSquare(arr[i] + arr[j])) {

f[k | (1 << j)][j] += f[k][i];

}

}

}

}

}

int ans = 0;

for (int i = 0; i < n; i++) {

ans += f[(1 << n) - 1][i];

}

// Handling repetitons.

for (int i = 0; i < s.size(); i++) {

ans /= fact(s[i]);

}

return ans;

}
