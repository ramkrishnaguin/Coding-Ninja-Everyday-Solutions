'''
    Time Complexity: O(M*(2^M))
    Space Complexity: O(2^M)

    Where M is the maximumNumber given.
'''

def currentStateAnswer(maximumNumber, target, dp, state):

    # If already calculated.
    if (dp[state] != 0):
        return dp[state] > 0

    # If the previous player already won.
    if (target <= 0):
        return 0

    # Iterating over all the numbers.
    for i in range(maximumNumber):

        # If the current number is not choosen and player can win after choosing the current number.
        if (not state & 1 << i and not currentStateAnswer(maximumNumber,
                target - i - 1, dp, state | 1 << i)):

            dp[state] = 1
            return 1

    # If can't win in any case.
    dp[state] = -1
    return 0

def makeTonyWin(maximumNumber, target):

    # Calculating the maximum sum possible.
    sumOfNumbers = maximumNumber * (maximumNumber + 1) // 2

    # Base Conditions.
    if (target <= 1):
        return 1

    if (sumOfNumbers < target):
        return 0

    if (sumOfNumbers == target):
        return maximumNumber % 2

    maxStates = 1 << maximumNumber

    # Storing the calculated answers.
    dp = [0 for j in range(maxStates)]

    # Return the answer of the final state.
    return currentStateAnswer(maximumNumber, target, dp, 0)
