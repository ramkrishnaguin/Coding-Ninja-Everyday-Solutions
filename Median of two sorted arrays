#include <vector>

#include <algorithm>

double median(std::vector<int>& a, std::vector<int>& b) {

    if (a.size() > b.size()) {

        return median(b, a); // Ensure that we always binary search on the smaller array.

    }

    

    int x = a.size();

    int y = b.size();

    int low = 0;

    int high = x;

    

    while (low <= high) {

        int partitionX = (low + high) / 2;

        int partitionY = (x + y + 1) / 2 - partitionX;

        

        // If partitionX is 0 it means nothing is there on left side. Use -INF for maxLeftX

        // If partitionX is length of input then there is nothing on right side. Use +INF for minRightX

        int maxLeftX = (partitionX == 0) ? INT_MIN : a[partitionX - 1];

        int minRightX = (partitionX == x) ? INT_MAX : a[partitionX];

        

        int maxLeftY = (partitionY == 0) ? INT_MIN : b[partitionY - 1];

        int minRightY = (partitionY == y) ? INT_MAX : b[partitionY];

        

        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {

            // We have partitioned array at correct place

            // Now get max of left elements and min of right elements to get the median in case of even length combined array size

            // or get max of left for odd length combined array size.

            if ((x + y) % 2 == 0) {

                return (double)(std::max(maxLeftX, maxLeftY) + std::min(minRightX, minRightY)) / 2;

            } else {

                return (double)std::max(maxLeftX, maxLeftY);

            }

        } else if (maxLeftX > minRightY) { // we are too far on right side for partitionX. Go on left side.

            high = partitionX - 1;

        } else { // we are too far on left side for partitionX. Go on right side.

            low = partitionX + 1;

        }

    }

    

    // Only we can come here is if input arrays were not sorted. Throw in some error handling.

    throw std::invalid_argument("Input arrays are not sorted.");

}

