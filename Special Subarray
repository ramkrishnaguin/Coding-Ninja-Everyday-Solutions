/*

Time Complexity: O(N)

Space Complexity: O(N)

where N is the size of the input array 'ARR'.

*/

#include<map>

vector<int> specialSubarray(int n, vector<int> &arr)

{

// Initialize a map 'LEFT' to store left most occurrence of every element.

map<int,int> left;

// Initialize a map 'FREQMAP' to store frequency of every element.

map<int,int> freqMap;

// Initialize a variable 'MAXFREQ' to store maximum frequency.

int maxFreq = 0;

// Initialize a variable 'MINLEN' to store length of smallest result subarray.

int minLen = -1;

// Initialize a variable 'STARTIDX' to store starting index of smallest result subarray

int startIdx = -1;

// Iterate 'I' in 0 to 'N':

for (int i = 0; i < n; i++) {

// Set 'X' as 'ARR[I]'.

int x = arr[i];

// If current element is not present in 'FREQMAP':

if (freqMap[x] == 0) {

// Put ('X', 'I') key-value pair in 'LEFT'.

left[x] = i;

// Put ('X', 1) key-value pair in 'FREQMAP'.

freqMap[x] = 1;

}

// Otherwise, increase the frequency of current element in 'FREQMAP'.

else {

freqMap[x] = freqMap[x] + 1;

}

// If frequency of current element is greater than 'MAXFREQ':

if (freqMap[x] > maxFreq) {

// Set 'MAXFREQ' as 'FREQMAP.GET(X)'.

maxFreq = freqMap[x];

// Set 'MINLEN' as ('I' - 'LEFT.GET(X)' + 1).

minLen = i - left[x] + 1;

// Set 'STARTIDX' as 'LEFT.GET(X)'

startIdx = left[x];

}

// select subsegment of smallest size

// If frequency of current element is equal to 'MAXFREQ' and ('I' - 'LEFT.GET(X)' + 1) is less than 'MINLENGTH':

else if ((freqMap[x] == maxFreq) && (i - left[x] + 1 < minLen)) {

// Set 'MINLEN' as ('I' - 'LEFT.GET(X)' + 1).

minLen = i - left[x] + 1;

// Set 'STARTIDX' as 'LEFT.GET(X)'

startIdx = left[x];

}

}

// Initialize an integer array 'ANS' to store the output.

vector<int> ans(minLen);

// Initialize a variable 'IDX' to iterate through 'ANS'.

int idx = 0;

// Iterate 'I' in 'STARTIDX' to 'STARTIDX' + 'MINLEN':

for (int i = startIdx; i < startIdx + minLen; i++) {

// Set 'ANS[IDX]' as 'ARR[I]' and increment 'IDX' by 1.

ans[idx++] = arr[i];

}

// Return 'ANS'.

return ans;

}
