/*

Time Complexity: O(N * M) ^ 2

Space Complexity: O(M * N)

where ‘N’ is the number of rows and ‘M’ is the number of columns in a given grid.

*/

bool isvalid(int x, int y, int n, int m)

{

return x >= 0 && y >=0 && x < n && y < m;

}

// Utility function to find the Augmented path

bool getAugmentedPath(int s, int t, int parent[], int visited[], vector<int> graph[], vector< vector<int> > &capacity)

{

visited[s] = 1;

for(int i = 0; i < graph[s].size(); i++)

{

int adj = graph[s][i];

if(visited[adj] == 0 && capacity[s][adj] > 0)

{

parent[adj] = s;

if(adj == t)

{

return true;

}

if(getAugmentedPath(adj, t, parent, visited, graph, capacity))

{

return true;

}

parent[adj] = -1;

}

}

return false;

}

// Utility function to update the Augmented path

int updateAugmented(int parent[], int node, vector< vector<int> > &capacity)

{

int ans=1;

while(parent[node] != -1){

int temp = parent[node];

capacity[temp][node] -= 1;

capacity[node][temp] += 1;

node =temp;

}

return ans;

}

// Utility function to find the maximum flow in a graph

int maxFlow(int s, int t, int n, int m, vector<int> graph[], vector< vector<int> > & capacity){

int visited[2 * n * m + 3];

int parent[2 * n * m + 3];

memset(visited, 0, sizeof(visited));

memset(parent,- 1, sizeof(parent));

int ans = 0;

while(getAugmentedPath(s, t, parent, visited, graph, capacity)){

ans += updateAugmented(parent, 2 * n * m + 1, capacity);

memset(visited, 0, sizeof(visited));

memset(parent, -1, sizeof(parent));

}

return ans;

}

int countLuckyGroup(vector< vector<int> > & grid, int n, int m)

{

// Store values to travel all four adjacent

int X[4] ={1,-1, 0, 0};

int Y[4] ={0, 0, 1, -1};

// Take a 2D array to store the capacity

vector< vector<int> > capacity(2 * m * n + 5, vector<int>(2 * m * n + 5, 0));

// Take array of vector to store graph

vector< int > graph[2 * m * n + 5];

// Run through all cells in the grid to create graph

for(int i = 0; i < n; i++)

{

for(int j = 0; j < m; j++)

{

// Give unique node value to each cell

int node = i * m + j +1;

// If cell contains 0

if(grid[i][j] == 0)

{

// Go through all adjacent cell

for(int k = 0; k < 4; k++)

{

// Find adjacent cell to (i, j)

int nx = i + X[k];

int ny = j + Y[k];

// If cell is a valid cell

if(isvalid(nx, ny, n, m))

{

// If adjacent cell is 1

if(grid[nx][ny] == 1)

{

// Create true and dummy node for this cell

int trueOne = nx * m + ny + 1;

int dummyOne = (nx + n) * m + ny + 1 ;

// Create undirected edge between 'node' and 'true' node

graph[node].push_back(trueOne);

graph[trueOne].push_back(node);

// Create undirected edge between 'dummy' and 'true' node

graph[dummyOne].push_back(trueOne);

graph[trueOne].push_back(dummyOne);

// Create undirected edge between 'node' and source node

graph[node].push_back(0);

graph[0].push_back(node);

// Give the edge weight equal to 1 for above edge

capacity[trueOne][dummyOne] = 1;

capacity[node][trueOne] = 1;

capacity[0][node] = 1;

}

}

}

}

// If cell contains 1

else if(grid[i][j] == 1)

{

// Give unique node value to dummy node of cell valued equla to 1

node = (i + n) * m + j +1;

// Go through all adjacent cell

for(int k = 0; k < 4; k++)

{

// Find adjacent cell to (i, j)

int nx = i + X[k];

int ny = j + Y[k];

// If cell is a valid cell

if(isvalid(nx, ny,n,m))

{

// If adjacent cell is 2

if(grid[nx][ny] == 2)

{

// Create true and dummy node for this cell

int trueOne = nx * m + ny + 1;

int dummyOne = (nx + n) * m + ny + 1;

// Create undirected edge between 'node' and 'true' node

graph[node].push_back(trueOne);

graph[trueOne].push_back(node);

// Create undirected edge between 'dummy' and 'true' node

graph[dummyOne].push_back(trueOne);

graph[trueOne].push_back(dummyOne);

// Give the edge weight equal to 1 for above edge

capacity[trueOne][dummyOne] = 1;

capacity[node][trueOne] = 1;

}

}

}

}

// If cell contains 2.

else if(grid[i][j] == 2){

node = (i + n) * m + j + 1;

for(int k = 0;k < 4; k++)

{

// Find adjacent cell to (i, j)

int nx = i + X[k];

int ny = j + Y[k];

// If cell(nx, ny) is valid

if(isvalid(nx, ny, n, m))

{

// If adjacent cell is 3

if(grid[nx][ny] == 3)

{

// Give unique value to 'true' node of 3

int trueOne = nx * m + ny + 1;

// Create an undirected edge between 'node' and 'true' node

graph[node].push_back(trueOne);

graph[trueOne].push_back(node);

capacity[node][trueOne] = 1;

}

}

}

}

// If cell contains 3

else

{

// Create undirected edge between sink and 3.

graph[node].push_back(n * m * 2 + 1);

graph[n * m * 2 + 1].push_back(node);

capacity[node][2 * n * m + 1] = 1;

}

}

}

// Call the max flow function to find the maximum flow in above created graph

int ans = maxFlow(0, 2 * n * m + 1, n, m, graph, capacity);

return ans;

}
