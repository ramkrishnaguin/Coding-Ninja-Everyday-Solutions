/*
    Time Complexity: O(N * M)
    Space Complexity: O(N + M)

    where 'N' is the length of the input string 'STR' and 'M' is the number of queries.
*/

#include<limits.h>

vector<int> findCost(int n, string str, int m, vector<vector<int>> &queries)
{
    // Store all possible combinations.
    vector<vector<char>> possibleComb = { { 'a', 'b', 'c' }, { 'a', 'c', 'b' }, { 'b', 'c', 'a' }, { 'b', 'a', 'c' },
            { 'c', 'b', 'a' }, { 'c', 'a', 'b' } };

    // To store pre-computed data.
    vector<vector<int>> dp (6, vector<int>(n + 1,0));

    for (int i = 0; i < 6; i++) {

        int count = 0;
        for (int j = 1; j <= n; j++) {

            // If there is a mismatch between the current pretty string's character
            // and the input string's character:
            if (possibleComb[i][(j - 1) % 3] != str[j - 1]) {

                count++;
            }

            dp[i][j] = count;
        }
    }

    // To store the answer to each query.
    vector<int> ans(m);

    // Start solving the queries.
    for (int i = 0; i < m; i++) {

        int l = queries[i][0];
        int r = queries[i][1];

        int mini = INT_MAX;

        // Cost will be MINIMUM('DP['J']['R'] - 'DP'['J']['L] - 1])
        for (int j = 0; j < 6; j++) {

            mini = min(mini, dp[j][r] - dp[j][l - 1]);
        }

        ans[i] = mini;

    }

    return ans;
}
