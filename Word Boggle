#include<bits/stdc++.h>

bool isValid(int x,int y,int n,int m,string &s,int indx,vector<vector<char>>&board){

return (x>=0 && y>=0 && x<n && y<m && board[x][y]==s[indx]);

}

bool solve(int x,int y,int indx,int n,int m,string &s,vector<vector<char>>&board){

if(!isValid(x,y,n,m,s,indx,board)) return false;

if(indx==s.size()-1) return true;

// cout<<x<<" "<<y<<" "<<s<<endl;

char temp=board[x][y];

board[x][y]='#';

int dx[] = {1, 1, 0, -1, -1, -1, 0, 1};

int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};

for(int i=0;i<8;i++){

if(solve(x+dx[i],y+dy[i],indx+1,n,m,s,board)){

board[x][y]=temp;

return true;

}

}

board[x][y]=temp;

return false;

}

bool doesExist(string &word,vector<vector<char>>&board,int n,int m){

for(int i=0;i<n;i++){

for(int j=0;j<m;j++){

if(solve(i,j,0,n,m,word,board))

return true;

}

}

return false;

}

vector<string> findPossibleWords(vector<string> words, vector<vector<char>> board){

//Write your code here

int n=board.size();

int m=board[0].size();

vector<string>ans;

unordered_set<string>st;

for(auto word:words){

if(!st.count(word) && doesExist(word,board,n,m)){

st.insert(word);

ans.push_back(word);

}

}

sort(ans.begin(),ans.end());

return ans;

}
