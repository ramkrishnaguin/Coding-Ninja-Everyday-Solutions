/*

	Time complexity: O(N) 
	Space complexity: O(1)

	Where ‘N’ is the total length of the string.

*/

#define mod 1000000007

int goodnessOfString(string &s)
{
	//	Variables to store the current depth and the answer.
	int depth = 0, ans = 0;

	//	Iterate through 's'.
	for (int i = 0; i < s.length(); i++)
	{
		if (s[i] == ',')
		{
			continue;
		}
		//	If new depth has started then increment the "depth" by 1.
		else if (s[i] == '[')
		{
			depth = depth + 1;
		}
		//	If one depth has ended then decrement "depth" by 1.
		else if (s[i] == ']')
		{
			depth = depth - 1;
		}
		else
		{
			//	"num" is used to store the current number in the string.
			int num = 0, j;

			for (j = i; j < s.length(); j++)
			{
				if (s[j] == ',' || s[j] == ']')
				{
					break;
				}
				else
				{
					num = num * 10 + (s[j] - '0');
				}
			}
			//	Multiply "depth" with "num" and then add it to the "ans".
			ans = (ans + (depth * num) % mod) % mod;
			i = j - 1;
		}
	}
	return ans;
}
