from os import *
from sys import *
from collections import *
from math import *

def maxTruck(n, m, p, d, permits, cap, reduction):

	# Write your code here.

	pass
graph = [[] for i in range(1002)]

# Take 2D array to store capacity of each edge.

capacity = [[0 for i in range(1003)] for i in range(1003)]

# Take two array to store road and capacity reduction for each day

R = [None for i in range(1003)]

C = [None for i in range(1003)]

# Take array to mark whether 'i'th node is visited or not.

visited = [None for i in range(1004)]

# Take array to store the parent of each node

parent = [None for i in range(1004)]

'''

    Utility function to find whether augmented path is present or not 

    and if present then also find the parent of each node

'''

def getAugumentedpath(s, t):

		# Make node 's' visited

	visited[s] = 1

	

	# Run a loop to move all node adjacent to 's'

	for i in range(len(graph[s])):

		

		# Store the adjacent node in variable 'adj'

		adj = graph[s][i]

		

		# If node 'adj' is node visited and capacity of edge 's' -> 'adj' is greater than 0

		if(visited[adj] == 0 and capacity[s][adj] > 0):

			

			# Make 's' as parent of 'adj'

			parent[adj] = s

			

			# If 'adj' is equal to targeted node 't' (sink) return True

			if(adj == t):

				return True

				

			# Call recursively on node 'adj', If augmented path is found return 'True'

			if(getAugumentedpath(adj, t)):

				return True

				

			# If augmented path is not found, unmark parent of 'adj' (backtrack)

			parent[adj] = -1

			

	# Return False

	return False

	

# Utility function to find max flow from current augmented path

def updateAugumentedPath(N, M):

	'''

        Take a variable 'minCap' initialize it to infinity

        It stores the minimum edge (bottle neck of augmented path) from augumented path

    '''

	

	minCap = 100000000

	

	# Take a variable 'node' initialize it to sink node

	node = N + M + 1

	

	# Run a loop while parent of node is 'node' equal to -1, to find the minimum edge node

	while(parent[node] != -1):

		

		# Store parent of 'node' in varible 'temp'

		temp = parent[node]

		

		# Update 'minCap'

		minCap = min(minCap, capacity[temp][node])

		

		# Make 'temp' as current node

		node = temp

		

	# Reinitialize node to sink node

	node = N +M + 1

	

	# Run a loop while parent of node is 'node' equal to -1, to find update edges of augmented path

	while(parent[node] != -1):

		

		# Store parent of 'node' in 'temp'

		temp = parent[node]

		

		# Decrease the residual capacity of edge

		capacity[temp][node] -= minCap

		

		# Increase the flow capacity

		capacity[node][temp] += minCap

		

		# Make 'node' equal to 'temp'

		node = temp

		

	# Return 'minCap', the flow from current augmented path 

	return minCap

	

# utility function to find the max flow

def maxFlow(s, t, N, M):

	

	# Let the initial answer be 0

	ans = 0

	

	# Take a flag 'f', initialize it to 0

	f = 0

	

	# Run a loop while 'f' is equal to 0 (till augmented path is found)

	while(f==0):

		

		# Run a loop to initialize parent and visited array

		for i in range(1003):

			visited[i] = 0

			parent[i] = -1

			

		# Check whether augmented path is present or not

		if(getAugumentedpath(s,t)):

			

			# Update the max-flow value

			ans += updateAugumentedPath(N, M)

		else:

			

			# Make flag equal to 1 (termination condition)

			f = 1

			

	# Return 'ans'

	return ans

	

# Let maxTruck(N, M, P, D, permits, cap, reduction) 

def maxTruck(N, M, P, D, permits,  cap, reduction):

	

	# Run a loop from 1 to 'N' and create an undirected edge between source node(0) and all trucks

	for i in range(1, N + 1):

		graph[0].append(i)

		graph[i].append(0)

		

		# Mark capacity of edge equal to 1

		capacity[0][i] = 1

		

	# Run a loop from 1 to 'P' and create an undirected edge between trucks and permitted path

	for i in range(1, P + 1):

		

		# Store 'truck' in 'u'

		u = permits[i - 1][0]

		

		# Store 'path' in 'v'

		v = permits[i - 1][1]

		

		

		# truck --- path edge

		graph[u].append(v + N)

		graph[v+N].append(u)

		

		# Mark capacity of the edge equal to 1

		capacity[u][v + N] = 1

		

	# Run a loop from 'N' + 1 to 'N' + 'M' and create an undirected edge between path and destination (sink)

	for i in range(N+1, N + M + 1):

		

		# path --- sink

		graph[i].append(N + M + 1)

		

		graph[N + M + 1].append(i)

		

		# Store capacity of this adge equal to given capacity 

		capacity[i][N + M + 1] = cap[i - N - 1]

		

	# Run a loop from 1 to 'D' reduce the capacity of each path for 'D' days.

	for i in range(1, D + 1):

		

		R[i] = reduction[i - 1][0]

		C[i] = reduction[i - 1][1]

		

		capacity[N + R[i]][N + M + 1] -= C[i]

		

	# Call maxFlow function and store the initial flow in 'initialMaxFlow' variable

	initialMaxFlow = maxFlow(0, N + M + 1, N, M)

	

	# Take an array to store answer

	ans = []

	

	# Run a loop from 'D' to 1

	while(D > 0):

		

		# Increament the capacity of path 'R[D]'

		capacity[N + R[D]][N + M + 1] += C[D]

		

		# Update the flow in graph by calling function 'maxFlow'

		initialMaxFlow += maxFlow(0, N + M + 1, N, M)

		

		# Push back into 'ans'

		ans.append(initialMaxFlow)

		

		D -= 1

		

	# Revese the 'ans' array 

	ans.reverse()

	

	# Return 'ans'

	return ans
