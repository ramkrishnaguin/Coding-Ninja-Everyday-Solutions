/*

Time Complexity : O(N)

Space Complexity : O(N)

Where 'N' is the number of the presentations.

*/

int maxInterval(int t, vector<int> &start, vector<int> &end, int k) {

// Create a vector to store the time duration in which there is no presentation.

vector<int> emptySlots;

// Fill the vector 'emptySlots'.

int prevEnd = 0;

for (int i = 0; i < start.size(); i++) {

emptySlots.push_back(start[i] - prevEnd);

prevEnd = end[i];

}

emptySlots.push_back(t - prevEnd);

int len = emptySlots.size();

// Declare a variable to store the final answer.

int ans = 0;

// Declare a variable to store the sum of current window.

int sum = 0;

// Find the sum of 1st K + 1 window.

for (int i = 0; i < k + 1 && i < len; i++) {

sum = sum + emptySlots[i];

}

// Update 'ans'.

ans = sum;

// Find the sum of all K + 1 window and update 'ans' with the maximum.

for (int i = k + 1; i < len; i++) {

sum = sum - emptySlots[i - (k + 1)] + emptySlots[i];

ans = max(sum, ans);

}

return ans;

}
