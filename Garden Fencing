from typing import List
import time
import math
import random
from copy import deepcopy


def distance(x1: float, y1: float, x2: float, y2: float) -> float:
    ans = math.sqrt(((x2 - x1) *(x2 - x1)) + ((y2 - y1) * (y2 - y1)))
    return ans

def circleFrom3Pts(aX: float, aY: float, bX: float,bY: float, cX: float, cY: float) -> List[float]:
    baX = bX - aX
    baY = bY - aY
    caX = cX - aX
    caY = cY - aY
    x = (baX * baX) + (baY * baY)
    y = (caX * caX) + (caY * caY)
    z = (baX * caY) - (baY * caX)
    xCoord = ((caY * x) - (baY * y)) / (2 * z) + aX
    yCoord = ((baX * y) - (caX * x)) / (2 * z) + aY
    radius = distance(xCoord, yCoord, aX, aY)
    return [xCoord, yCoord, radius]

def findCircle(b: List[List[float]]) -> List[float]:
    if len(b) == 0:
        return [0.0, 0.0, 0.0]
    elif len(b) == 1:
        return [b[0][0], b[0][1], 0.0]
    elif(len(b) == 2):
        xCoord = (b[0][0] + b[1][0]) / 2
        yCoord = (b[0][1] + b[1][1]) / 2
        radius = distance(b[0][0], b[0][1], b[1][0], b[1][1]) / 2
        return [xCoord, yCoord, radius]
    else:
        return circleFrom3Pts(b[0][0], b[0][1],b[1][0], b[1][1], b[2][0], b[2][1])

def smallestEnclosingCircle(i: int, bPts:List[List[float]], trees: List[List[int]])-> List[int]:
    boundaryPts = deepcopy(bPts)
    if i == -1 or len(boundaryPts) == 3:
        return findCircle(boundaryPts)
    circle = smallestEnclosingCircle(i-1, boundaryPts, trees)
    curX = (trees[i][0])*1.0
    curY = (trees[i][1])*1.0

    distToCenter = distance(curX,curY, circle[0], circle[1])
    if (distToCenter <= circle[2]):
        return circle
    boundaryPts.append([curX, curY])
    return smallestEnclosingCircle(i - 1,boundaryPts, trees)

def gardenFencing(n: int, trees: List[List[float]]) -> List[float]:
    # write your code here
    boundaryPts = []
    return smallestEnclosingCircle(n - 1,boundaryPts, trees)
    pass
