'''

	Time Complexity: O(N * M)
	Space Complexity: O(max(N, M)), 

    Where N is the number of rows and M is the number of columns in the matrix.

'''


def rotateMatrixHelper(mat, rowStart, colStart, rowEnd, colEnd):

    # Base Condition
    if(rowStart >= rowEnd or colStart >= colEnd):
        return

    if (rowStart >= rowEnd - 1 or colStart >= colEnd - 1):
        return

    previous = mat[rowStart + 1][colStart]
    current = previous

    # Move elements of first row from the remaining rows
    for i in range(colStart, colEnd):

        current = mat[rowStart][i]
        mat[rowStart][i] = previous
        previous = current

    rowStart += 1

    # Move elements of last column from the remaining columns
    for i in range(rowStart, rowEnd):

        current = mat[i][colEnd-1]
        mat[i][colEnd-1] = previous
        previous = current

    colEnd -= 1

    # Move elements of last row from the remaining rows
    if (rowStart < rowEnd):
        for i in range(colEnd - 1, colStart - 1, -1):

            current = mat[rowEnd-1][i]
            mat[rowEnd-1][i] = previous
            previous = current

    rowEnd -= 1

    # Move elements of first column from the remaining rows
    if (colStart < colEnd):
        for i in range(rowEnd-1, rowStart-1, -1):

            current = mat[i][colStart]
            mat[i][colStart] = previous
            previous = current

    colStart += 1

    # Recursively rotate inner rings
    rotateMatrixHelper(mat, rowStart, colStart, rowEnd, colEnd)


def rotateMatrix(mat, n, m):

    # Recursive function to rotate the matrix
    rotateMatrixHelper(mat, 0, 0, n, m)
