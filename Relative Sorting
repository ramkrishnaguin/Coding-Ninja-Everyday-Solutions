#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

vector<int> relativeSorting(vector<int> &arr, vector<int> &brr, int n, int m) {
    unordered_map<int, int> frequency;
    vector<int> result;

    // Count the frequency of each element in arr
    for (int i = 0; i < n; i++) {
        frequency[arr[i]]++;
    }

    // Process elements in brr and add them to result in the specified order
    for (int i = 0; i < m; i++) {
        int currentElement = brr[i];
        if (frequency.find(currentElement) != frequency.end()) {
            int count = frequency[currentElement];
            while (count > 0) {
                result.push_back(currentElement);
                count--;
            }
            frequency.erase(currentElement);
        }
    }

    // Add the remaining elements in arr to result in sorted order
    vector<int> remaining;
    for (auto &entry : frequency) {
        int element = entry.first;
        int count = entry.second;
        while (count > 0) {
            remaining.push_back(element);
            count--;
        }
    }

    sort(remaining.begin(), remaining.end());

    // Append remaining elements to the result
    result.insert(result.end(), remaining.begin(), remaining.end());

    return result;
}
