/*

Time Complexity:O((2^n) *k)

Space Complexity:O((2^n))

n is the number of strings and k is the length of the string.

*/

//Create a recursive function count_steps(int mask, String arr[],int k,int n, int pos = 0) where k is the size of string.

int count_touches(int mask, vector<string>& arr, int k, int n, vector<int>& dp)

{

// When mask contains only 1 bit it means every string is recongnised.

if (mask && (mask & (mask - 1)) == 0)

{

// Return 0;

return 0;

}

// Initialise a variable 'ans' = 1e9 to store the answer for current mask.

int ans = 1e9;

// Adding memoization condition.

if (dp[mask] != -1)

{

return dp[mask];

}

// Checking for each positions from '0' to 'k-1' where n is the size of binary strings, to find the minimum answer.

for(int pos = 0; pos < k; pos++) {

// Create two-variable mask1=0 and mask2=0 to group strings having pos character 1 and 0.

int mask1 = 0;

int mask2 = 0;

// Declare a variable 'cnt' to store the total number of touches for the current 'pos'.

int cnt = 0;

// Iterate over all the strings for variable 'i' from 0 to 'n-1' to split the strings based on character at pos-th position.

for (int i = 0; i < n; i++)

{

// If position 'i' is set in mask means we have to check for the ith string.

if (((1 << i)&mask))

{

// Increment cnt.

cnt++;

// check if 'arr[i][pos]' == 1.

if (arr[i][pos] == '1')

{

// Set the ith bit in mask2's binary representation.

mask2 |= (1 << i);

}

// Else

else

{

// Set the ith bit in mask1's binary representation.

mask1 |= (1 << i);

}

}

}

// Check if 'mask1' is greater than 0 and 'mask2' is greater than zero.

if(mask1 && mask2) {

// Declare a variable 'a' to store the ans of the recursive function for mask1.

int a = count_touches(mask1, arr, k, n, dp);

// Declare a variable 'b' to store the ans of the recursive function for mask2.

int b = count_touches(mask2, arr, k, n, dp);

// Make 'ans' = min('ans', 'cnt'+'a'+'b').

ans = min(ans, cnt + a + b);

}

}

// Return 'dp[mask]' = 'ans'.

return dp[mask] = ans;

}

int minimumTouchesRequired(int n, vector<string> arr) {

// Initialise a variable 'k' with arr[0].size to store the length of the binary string.

int k = arr[0].size();

// Initialise a dp of size 2^n with -1.

vector<int>dp(1 << n, -1);

// Return the recursive function with value of current mask as 2^n-1;

return count_touches((1 << n) - 1, arr, k, n, dp);

}
