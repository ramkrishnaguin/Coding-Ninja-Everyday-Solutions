#include <bits/stdc++.h> 
int dp[55][55][55];
int f(vector<vector<int>>& matrix, int i, int j, int x, int y){
    if(i>=matrix.size() || j>=matrix.size() || x>=matrix.size() || y>=matrix.size() || matrix[i][j] == -1 || matrix[x][y] == -1) return INT_MIN;
    if(i == matrix.size() - 1 && j == matrix[0].size() - 1){
        return matrix[i][j] == 1;
    }
    if(dp[i][j][x]!=-1) return dp[i][j][x];
    int ans = INT_MIN;
    ans = max(ans, f(matrix, i+1, j, x+1, y));
    ans = max(ans, f(matrix, i+1, j, x, y+1));
    ans = max(ans, f(matrix, i, j+1, x+1, y));
    ans = max(ans, f(matrix, i, j+1, x, y+1));
    if(ans == INT_MIN) return dp[i][j][x] = INT_MIN;
    ans+=matrix[i][j] == 1;
    ans+=matrix[x][y] == 1;
    if(i==x && j==y && matrix[i][j]) ans--;
    return dp[i][j][x] = ans;
}

int collectApples(vector<vector<int>>& matrix) 
{
    // Write your code here.
    memset(dp,-1,sizeof(dp));
    int ans = f(matrix, 0,0,0,0);
    return (ans==INT_MIN)?0:ans;
}
