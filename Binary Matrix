/*
    Time Complexity : O(N * M)
	    Space Complexity : O(1)

		    Where N and M are numbers of rows and columns in the given matrix Matrix.
			*/

			vector<vector<int>> findNearestZero(vector<vector<int>> &mat) 
			{
			    // Dimensions of given matrix.
				    int n = mat.size();
					    int m = mat[0].size();

						    // Create a matrix DIST of dimension N*M and fill it with infinity.
							    const int INF = 1e9;
								    vector<vector<int>> dist(n, vector<int>(m, INF));

									    // Iterate matrix from top-left and compute 'DIST'.
										    for (int i = 0; i < n; i++) 
												{
												        for (int j = 0; j < m; j++) 
																{
																            if (mat[i][j] == 0) 
																						{
																						                dist[i][j] = 0;
																										            }
																													            else {
																																                if (i == 0 && j == 0) 
																																								{
																																								                    continue;
																																													                }
																																																	                else if (i == 0) 
																																																									{
																																																									                    dist[i][j] = dist[i][j - 1] + 1;
																																																														                }
																																																																		                else if (j == 0) 
																																																																										{
																																																																										                    dist[i][j] = dist[i - 1][j] + 1;
																																																																															                }
																																																																																			                else 
																																																																																											{
																																																																																											                    dist[i][j] = min(dist[i - 1][j], dist[i][j - 1]) + 1;
																																																																																																                }
																																																																																																				            }
																																																																																																							        }
																																																																																																									    }

																																																																																																										    // Iterate matrix from bottom-right and update 'DIST'.
																																																																																																											    for (int i = n - 1; i >= 0; i--) 
																																																																																																													{
																																																																																																													        for (int j = m - 1; j >= 0; j--) 
																																																																																																																	{
																																																																																																																	            if (i == n - 1 && j == m - 1) 
																																																																																																																							{
																																																																																																																							                continue;
																																																																																																																											            }
																																																																																																																														            else if (i == n - 1) 
																																																																																																																																				{
																																																																																																																																				                dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);
																																																																																																																																								            }
																																																																																																																																											            else if (j == m - 1) 
																																																																																																																																																	{
																																																																																																																																																	                dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);
																																																																																																																																																					            }
																																																																																																																																																								            else 
																																																																																																																																																														{
																																																																																																																																																														                dist[i][j] = min(dist[i][j], min(dist[i + 1][j], dist[i][j + 1]) + 1);
																																																																																																																																																																		            }
																																																																																																																																																																					        }
																																																																																																																																																																							    }

																																																																																																																																																																								    return dist;
																																																																																																																																																																									}
